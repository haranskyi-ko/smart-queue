@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http
@inject IJSRuntime JS

<EditForm Model="model" OnValidSubmit="RegisterAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-2">
        <label class="form-label">Ім’я</label>
        <InputText class="form-control" @bind-Value="model.Name" />
    </div>

    <div class="mb-3">
        <label class="form-label">Телефон</label>
        <InputText class="form-control" @bind-Value="model.PhoneNumber" />
    </div>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="text-danger">@ErrorMessage</p>
    }

    <button class="btn btn-primary" disabled="@busy">
        @if (busy)
        {
            <div>
            <span class="spinner-border spinner-border-sm" role="status"></span>
            &nbsp; Реєстрація…
            </div>
        }
        else
        {<div>
            Зареєструватись
            </div>
                }
    </button>
</EditForm>

@code
{
    /* -------- параметри -------- */
    [Parameter, EditorRequired] public string QueueCode { get; set; } = string.Empty;
    [Parameter] public EventCallback OnRegistered { get; set; }

    /* -------- локальний стан -------- */
    private RegisterDto model = new();
    private bool busy;
    private string? ErrorMessage;

    /* -------- реєстрація -------- */
    private async Task RegisterAsync()
    {
        busy = true;
        ErrorMessage = null;

        try
        {
            var response = await Http.PostAsJsonAsync("/api/queue/register", new
            {
                Name = model.Name,
                PhoneNumber = model.PhoneNumber,
                Code = QueueCode
            });

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<RegisterResult>();
                if (result is not null)
                {
                    // зберігаємо userId у localStorage, щоб наступного разу одразу впізнати користувача
                    await JS.InvokeVoidAsync("localStorage.setItem",
                                             "smartqueue_uid",
                                             result.UserId.ToString());
                }

                await OnRegistered.InvokeAsync();   // повідомляємо батьківський компонент
            }
            else
            {
                ErrorMessage = await response.Content.ReadAsStringAsync();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            busy = false;
        }
    }

    /* -------- DTO та модель форми -------- */
    private class RegisterDto
    {
        [Required] public string Name { get; set; } = string.Empty;
        [Required] public string PhoneNumber { get; set; } = string.Empty;
    }

    private record RegisterResult(int QueueItemId, int UserId);
}
